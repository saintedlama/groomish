import { expect } from "chai";
import connect from "../index";
import initDb from "./utils/initDb";
import { Client } from "pg";

describe("repository", () => {
  let client: Client;

  beforeEach(async () => {
    client = await initDb()
  });

  afterEach(async () => await client.end());

  it("should insert an entity without id", async () => {
    await client.query(
      `CREATE TABLE users (name VARCHAR)`
    );

    const users = connect(client).repository("users");
    const user = {
      name: "John Doe",
    };

    const result = await users.insert(user);
    expect(result).to.deep.equal({
      name: user.name,
    });

    await users.connection.pg.end();
  });

  it("should insert an entity returning the generated id", async () => {
    await client.query(
      `CREATE TABLE users (id SERIAL PRIMARY KEY, name VARCHAR)`
    );

    const users = connect(client).repository("users");
    const user = {
      name: "John Doe",
    };

    const result = await users.insert(user);
    expect(result).to.deep.equal({
      id: 1,
      name: user.name,
    });

    await users.connection.pg.end();
  });

  it("should not insert an id if the id column is generated by the db", async () => {
    await client.query(
      `CREATE TABLE users (id SERIAL PRIMARY KEY, name VARCHAR)`
    );

    const users = connect(client).repository("users");
    const user = {
      id: 10,
      name: "John Doe",
    };

    const result = await users.insert(user);
    expect(result).to.deep.equal({
      id: 1,
      name: user.name,
    });

    await users.connection.pg.end();
  });
});
